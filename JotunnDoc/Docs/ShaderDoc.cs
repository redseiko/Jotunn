using System.Linq;
using System.Text;
using Jotunn.Managers;
using JotunnDoc.Patches;
using UnityEngine;

namespace JotunnDoc.Docs
{
    public class ShaderDoc : Doc
    {
        public ShaderDoc() : base("prefabs/shader-list.md")
        {
            GameEvents.OnPlayerSpawned += DocShaders;
        }

        private void DocShaders(Player self)
        {
            if (Generated)
            {
                return;
            }

            Jotunn.Logger.LogInfo("Documenting prefab shaders");

            AddHeader(1, "Shader list");
            AddText("All shaders and their properties currently in the game.");
            AddText($"This file is automatically generated from Valheim {Version.GetVersionString(true)} using the JotunnDoc mod found on our GitHub.");
            AddTableHeader("Shader", "AssetID", "Properties");

            var shaders = PrefabManager.Cache.GetPrefabs(typeof(Shader)).Values;
            StringBuilder propsb = new StringBuilder();

            foreach (Shader shady in shaders.OrderBy(x => x.name).Cast<Shader>())
            {
                if (shady.GetPropertyCount() > 0)
                {
                    propsb.Append("<dl>");
                    for (int i = 0; i < shady.GetPropertyCount(); ++i)
                    {
                        propsb.Append("<dd>");
                        propsb.Append(shady.GetPropertyName(i));
                        string desc = shady.GetPropertyDescription(i);
                        if (!string.IsNullOrEmpty(desc))
                        {
                            propsb.Append($" ({desc})");
                        }
                        propsb.Append("</dd>");
                    }
                    propsb.Append("</dl>");
                }

                AddTableRow(shady.name, AssetManager.Instance.GetAssetID<Shader>(shady.name).ToString(), propsb.ToString());
                propsb.Length = 0;
            }

            Save();
        }
    }
}
